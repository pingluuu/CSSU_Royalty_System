datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  CASHIER
  MANAGER
  SUPERUSER
}

enum PromotionType {
  ONE_TIME
  AUTOMATIC
}

enum TransactionType {
  PURCHASE
  ADJUSTMENT
  REDEMPTION
  TRANSFER
  EVENT
}

model User {
  id         Int          @id @default(autoincrement())
  utorid     String       @unique
  name       String       
  email      String       @unique
  password   String?      
  role       Role         
  verified   Boolean      @default(false)
  birthday   DateTime?    
  points     Int          @default(0)
  createdAt  DateTime     @default(now())
  lastLogin  DateTime?    
  avatarUrl  String?      
  expiresAt  DateTime?     
  resetToken String?      
  suspicious Boolean      @default(false)
  transactions Transaction[]
  userPromotions UserPromotion[]
  eventsOrganized EventOrganizer[]
  eventsGuest     EventGuest[]
  resetTokenHistory ResetTokenHistory[] 
}

model Promotion {
  id            Int       @id @default(autoincrement())
  name          String
  description   String
  startTime     DateTime
  endTime       DateTime
  promotionType PromotionType    
  minimumSpend  Float?
  rate          Float?
  extraPoints   Int       @default(0)
  createdBy     Int    
  userPromotions UserPromotion[]
  transactionPromotions TransactionPromotion[]
}

model UserPromotion {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  promotion    Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  promotionId  Int
  used         Boolean   @default(false)

  @@unique([userId, promotionId])
}

model ResetTokenHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id                 Int             @id @default(autoincrement())
  user               User            @relation(fields: [userId], references: [id])
  userId             Int
  type               TransactionType
  amount             Float?          
  points             Int
  cashierId          Int?            
  remark             String?
  createdAt          DateTime        @default(now())
  relatedId          Int?            
  suspicious         Boolean         @default(false)
  transactionPromotions TransactionPromotion[]
}

model TransactionPromotion {
  id            Int           @id @default(autoincrement())
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  transactionId Int
  promotion     Promotion     @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  promotionId   Int

  @@unique([transactionId, promotionId])
}

model Event {
  id                Int             @id @default(autoincrement())
  name              String
  description       String
  startTime         DateTime
  endTime           DateTime
  location          String
  capacity          Int?
  pointsAllocated   Int
  pointsRemain      Int             
  pointsAwarded     Int             
  published         Boolean         @default(false) 
  organizers        EventOrganizer[] 
  guests            EventGuest[]     
}

model EventOrganizer {
  eventId   Int
  userId    Int
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
}

model EventGuest {
  eventId   Int
  userId    Int
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
}